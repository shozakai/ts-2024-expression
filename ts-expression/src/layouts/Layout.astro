---
import type { LayoutProps } from '@/types/meta'
import { defaultMeta } from '@/types/meta'
import { getPageConfig, mergePageConfig, type PageConfig, type PageId } from '@/types/pageConfig'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import ParticleRing from '@/components/ParticleRing.astro'

import '../styles/main.scss'

interface Props extends LayoutProps {
    title?: string
    description?: string
    pageId?: PageId | string // ページ固有のID
    pageConfigOverride?: Partial<PageConfig> // ページ設定の上書き
}

const {
    meta,
    lang = 'ja',
    class: className = '',
    title,
    description,
    pageId,
    pageConfigOverride,
} = Astro.props

// ページ設定を取得
const basePageConfig = getPageConfig(pageId)
const pageConfig = pageConfigOverride 
    ? mergePageConfig(basePageConfig, pageConfigOverride)
    : basePageConfig

// titleとdescriptionの直接的な指定をサポート（後方互換性のため）
const finalMeta = {
    ...defaultMeta,
    ...meta,
    // ページ設定からのメタ情報を適用
    ...(pageConfig.metaOverrides && pageConfig.metaOverrides),
    // 直接指定された値で上書き（最高優先度）
    ...(title && { title }),
    ...(description && { description }),
}

// URLの設定
const currentUrl = new URL(Astro.url.pathname, Astro.site)
const canonicalUrl = finalMeta.canonicalUrl || currentUrl.toString()

// 画像URLの正規化
const imageUrl = finalMeta.image
    ? finalMeta.image.startsWith('http')
        ? finalMeta.image
        : new URL(finalMeta.image, Astro.site).toString()
    : null

// ページ固有のクラス名を生成
const pageClass = pageId ? `page-${pageId}` : ''
const configClasses = pageConfig.bodyClasses || []
const bodyClasses = [pageClass, ...configClasses, className].filter(Boolean).join(' ')
---

<!doctype html>
<html lang={lang}>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />

        <!-- Primary Meta Tags -->
        <title>{finalMeta.title}</title>
        <meta name="title" content={finalMeta.title} />
        <meta name="description" content={finalMeta.description} />

        <!-- Additional Meta Tags -->
        {
            finalMeta.keywords && (
                <meta name="keywords" content={finalMeta.keywords.join(', ')} />
            )
        }
        {finalMeta.author && <meta name="author" content={finalMeta.author} />}
        <meta name="robots" content={finalMeta.robots} />
        <link rel="canonical" href={canonicalUrl} />

        <!-- Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,100..900;1,100..900&display=swap"
            rel="stylesheet"
        />

        <!-- Open Graph / Facebook -->
        <meta property="og:type" content={finalMeta.type} />
        <meta property="og:url" content={canonicalUrl} />
        <meta property="og:title" content={finalMeta.title} />
        <meta property="og:description" content={finalMeta.description} />
        <meta property="og:locale" content={finalMeta.locale} />
        {
            finalMeta.siteName && (
                <meta property="og:site_name" content={finalMeta.siteName} />
            )
        }
        {
            imageUrl && (
                <>
                    <meta property="og:image" content={imageUrl} />
                    {finalMeta.imageAlt && (
                        <meta
                            property="og:image:alt"
                            content={finalMeta.imageAlt}
                        />
                    )}
                </>
            )
        }

        <!-- Twitter -->
        <meta property="twitter:card" content={finalMeta.twitterCard} />
        <meta property="twitter:url" content={canonicalUrl} />
        <meta property="twitter:title" content={finalMeta.title} />
        <meta property="twitter:description" content={finalMeta.description} />
        {imageUrl && <meta property="twitter:image" content={imageUrl} />}

        <!-- Article specific meta tags -->
        {
            finalMeta.type === 'article' && (
                <>
                    {finalMeta.publishedTime && (
                        <meta
                            property="article:published_time"
                            content={finalMeta.publishedTime}
                        />
                    )}
                    {finalMeta.modifiedTime && (
                        <meta
                            property="article:modified_time"
                            content={finalMeta.modifiedTime}
                        />
                    )}
                    {finalMeta.author && (
                        <meta
                            property="article:author"
                            content={finalMeta.author}
                        />
                    )}
                </>
            )
        }

        <!-- JSON-LD Structured Data -->
        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                '@context': 'https://schema.org',
                '@type': finalMeta.type === 'article' ? 'Article' : 'WebPage',
                name: finalMeta.title,
                description: finalMeta.description,
                url: canonicalUrl,
                ...(imageUrl && { image: imageUrl }),
                ...(finalMeta.author && {
                    author: { '@type': 'Person', name: finalMeta.author },
                }),
                ...(finalMeta.publishedTime && {
                    datePublished: finalMeta.publishedTime,
                }),
                ...(finalMeta.modifiedTime && {
                    dateModified: finalMeta.modifiedTime,
                }),
            })}
        />


    </head>
    <body class={bodyClasses}>
        <!-- パーティクルエフェクトを背景として配置 -->
        {pageConfig.showParticleRing && 
            <ParticleRing
            id="page-particles"
            class="page-particle-bg"
            particleCount={pageConfig.particleSettings?.particleCount || 6000}
            innerRadius={pageConfig.particleSettings?.innerRadius || 120}
            scatterIntensity={pageConfig.particleSettings?.scatterIntensity || 100}
            ringSharpness={pageConfig.particleSettings?.ringSharpness || 3}
            backgroundColor={pageConfig.particleSettings?.backgroundColor || 0x000000}
            opacity={pageConfig.particleSettings?.opacity || 0.95}
            rotationSpeed={pageConfig.particleSettings?.rotationSpeed || 0.0008}
            enableMouseInteraction={pageConfig.particleSettings?.enableMouseInteraction ?? true}
            enableControls={false}
            enableBigBangAnimation={pageConfig.particleSettings?.enableBigBangAnimation ?? true}
            animationDuration={pageConfig.particleSettings?.animationDuration || 3.0}
            animationDelay={pageConfig.particleSettings?.animationDelay || 0.5}
            width="100vw"
            height="100vh"
            />
        }
        
        {pageConfig.showHeader && <Header />}
        
        <!-- swup コンテナ -->
        <main id="swup" class="transition-fade">
            <slot />
        </main>
        
        {pageConfig.showFooter && <Footer />}

        <!-- Lenis Smooth Scrolling Initialization -->
        <script>
            import { LenisSetup } from '@/utils/lenis-setup'
            
            // DOMContentLoadedイベントでLenisを初期化
            document.addEventListener('DOMContentLoaded', () => {
                // Lenisを初期化
                LenisSetup.init({
                    duration: 1.2,
                    easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
                    smooth: true,
                    mouseMultiplier: 1,
                    smoothTouch: false, // モバイルでは無効にする（パフォーマンス考慮）
                })

                // GSAPと統合（ScrollTriggerを使用している場合）
                LenisSetup.setupWithGSAP()
            })

            // ページ離脱時にLenisを破棄
            window.addEventListener('beforeunload', () => {
                LenisSetup.destroy()
            })
        </script>

        <!-- swup Page Transitions Initialization -->
        <script>
            import { SwupSetup } from '@/scripts/swup-setup'
            
            // DOMContentLoadedイベントでswupを初期化
            document.addEventListener('DOMContentLoaded', () => {
                // swupを初期化
                SwupSetup.init({})

                // swupの準備完了イベントをリッスン
                document.addEventListener('swup:pageReady', () => {
                    console.log('New page ready - reinitializing scripts')
                    
                    // Lenisの再初期化（必要に応じて）
                    if (window.lenis) {
                        window.lenis.resize()
                    }
                })
            })

            // ページ離脱時にswupを破棄
            window.addEventListener('beforeunload', () => {
                SwupSetup.destroy()
            })
        </script>
    </body>
</html>
